// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@map("session")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    games         Game[]
    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verfication_token")
}

model Game {
    id        String   @id @default(cuid())
    width     Int
    height    Int
    depth     Int
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    pile      Pile?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@map("game")
}

model Pile {
    id        String   @id @default(cuid())
    gameId    String   @unique
    game      Game     @relation(fields: [gameId], references: [id])
    cubes     Cube[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@map("pile")
}

model Cube {
    id        String   @id @default(cuid())
    x         Int
    y         Int
    z         Int
    pileId    String
    pile      Pile     @relation(fields: [pileId], references: [id])
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@unique([x, y, z, pileId])
    @@map("cube")
}
